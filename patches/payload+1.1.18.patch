diff --git a/node_modules/payload/dist/collections/init.js b/node_modules/payload/dist/collections/init.js
index 9383d60..2be62aa 100644
--- a/node_modules/payload/dist/collections/init.js
+++ b/node_modules/payload/dist/collections/init.js
@@ -62,10 +62,10 @@ function registerCollections(ctx) {
             });
             versionSchema.plugin(mongoose_paginate_v2_1.default, { useEstimatedCount: true })
                 .plugin(buildQuery_1.default);
-            ctx.versions[collection.slug] = mongoose_1.default.model(versionModelName, versionSchema);
+            ctx.versions[collection.slug] = mongoose_1.default.models[versionModelName] || mongoose_1.default.model(versionModelName, versionSchema);
         }
         ctx.collections[formattedCollection.slug] = {
-            Model: mongoose_1.default.model(formattedCollection.slug, schema),
+            Model: mongoose_1.default.models[formattedCollection.slug] || mongoose_1.default.model(formattedCollection.slug, schema),
             config: formattedCollection,
         };
         // If not local, open routes
diff --git a/node_modules/payload/dist/globals/init.js b/node_modules/payload/dist/globals/init.js
index b24b440..0ed3962 100644
--- a/node_modules/payload/dist/globals/init.js
+++ b/node_modules/payload/dist/globals/init.js
@@ -30,7 +30,7 @@ function initGlobals(ctx) {
                 });
                 versionSchema.plugin(mongoose_paginate_v2_1.default, { useEstimatedCount: true })
                     .plugin(buildQuery_1.default);
-                ctx.versions[global.slug] = mongoose_1.default.model(versionModelName, versionSchema);
+                ctx.versions[global.slug] =  mongoose_1.default.models['versionModelName'] || mongoose_1.default.model(versionModelName, versionSchema);
             }
         });
         // If not local, open routes
diff --git a/node_modules/payload/dist/init.js b/node_modules/payload/dist/init.js
index f47f493..bba63f3 100644
--- a/node_modules/payload/dist/init.js
+++ b/node_modules/payload/dist/init.js
@@ -45,7 +45,11 @@ const init = (payload, options) => {
         .digest('hex')
         .slice(0, 32);
     payload.local = options.local;
-    payload.config = (0, load_1.default)(payload.logger);
+    if (options.validatedConfig) {
+        payload.config = options.validatedConfig
+    } else {
+        payload.config = (0, load_1.default)(payload.logger);
+    }
     // If not initializing locally, scaffold router
     if (!payload.local) {
         payload.router = express_1.default.Router();
diff --git a/node_modules/payload/dist/mongoose/buildQuery.js b/node_modules/payload/dist/mongoose/buildQuery.js
index 55b3e77..409f289 100644
--- a/node_modules/payload/dist/mongoose/buildQuery.js
+++ b/node_modules/payload/dist/mongoose/buildQuery.js
@@ -144,7 +144,7 @@ class ParamParser {
             if (priorSchemaType) {
                 const priorSchemaTypeOptions = (0, getSchemaTypeOptions_1.getSchemaTypeOptions)(priorSchemaType);
                 if (typeof priorSchemaTypeOptions.ref === 'string') {
-                    const RefModel = mongoose_1.default.model(priorSchemaTypeOptions.ref);
+                    const RefModel = mongoose_1.default.models[priorSchemaTypeOptions.ref] || mongoose_1.default.model(priorSchemaTypeOptions.ref);
                     lastIncompletePath.complete = true;
                     const remainingPath = pathSegments.slice(i).join('.');
                     paths = [
diff --git a/node_modules/payload/dist/preferences/model.js b/node_modules/payload/dist/preferences/model.js
index 7232456..0dbe0c1 100644
--- a/node_modules/payload/dist/preferences/model.js
+++ b/node_modules/payload/dist/preferences/model.js
@@ -24,7 +24,7 @@ var __importStar = (this && this.__importStar) || function (mod) {
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 const mongoose_1 = __importStar(require("mongoose"));
-const Model = mongoose_1.default.model('_preferences', new mongoose_1.Schema({
+const Model = mongoose_1.default.models['_preferences'] || mongoose_1.default.model('_preferences', new mongoose_1.Schema({
     user: {
         type: mongoose_1.Schema.Types.ObjectId,
         refPath: 'userCollection',
